{"name":"Watchy","tagline":"Simple Distributed Process and System Monitoring","body":"# Watchy\r\n\r\nWatchy is a distributed system for Application and Server Monitoring, I've always found most solutions be very complicated and hard to manage. Making applications watch process id's then they stop and the pid has updated and you start the whole thing over again.\r\n\r\nWatchy has a distributed architecture and communication between the daemon on each server to the dashboard is over udp, meaning if something goes down and comes back up again it just simply doesn't matter about handling connection issues. It seems to be working very well in my tests at work and i am sure you will love it.\r\n\r\n![alt text](http://redbrain.github.io/watchy/images/usage/watchy1.png \"Main dashboard showing all processes sending stats\")\r\n\r\n## How it works\r\n\r\nWatchy has a very application/event driven model and it can be seen in this diagram:\r\n\r\n![alt text](http://redbrain.github.io/watchy/images/arch/watchy1.png \"Arch1\")\r\n\r\nThis can be all scripted or manipulatied by Python or C/C++ but first we need to start the server:\r\n\r\n```bash\r\n$ /usr/local/bin/watchy.py --help\r\nUsage: watchy.py [options]\r\n\r\nOptions:\r\n  -h, --help            show this help message and exit\r\n  -v, --version         Print version\r\n  -l LOGFILE, --logfile=LOGFILE\r\n                        Ouput logfile\r\n  -c CONFIG, --config=CONFIG\r\n                        Config file location\r\n  -F, --fork            Fork as daemon\r\n  -N NAME, --name=NAME  Logging name\r\n  -d, --debug           Verbose Debugging on of off\r\n$ /usr/local/bin/watchy -c /etc/watchy/example-watchy.cfg --debug\r\n[WATCHY] INFO WSGIServer:[gevent] starting http://0.0.0.0:8787/\r\n[WATCHY] INFO Starting StatsAggregator on 0.0.0.0:7878\r\n...\r\n```\r\n\r\nNow we can start posting stuff to watchy:\r\n\r\n```python\r\n>>> import pywatchy\r\n# hostname and port of watchy server\r\n>>> daemon = pywatchy.WatchyDaemon ('localhost', 7878) \r\n# Creates or attaches to existing daemon on the server                                                                                                                                                              \r\n>>> daemon.watchHost ('hostname')\r\n# tell the daemon to watch the host server for statistics and post under specified key ('hostname')\r\n```\r\n\r\nYou can even do more stop and start watching pid's or even post logs:\r\n\r\n```python\r\n>>> daemon.watchPid ('watchyserver', 14293) # watch the python web app\r\n>>> daemon.postMessage ('test', 'Hello World')\r\n>>> daemon.stopWatchPid (14293) # stop watching in\r\n```\r\n\r\nThis is pretty fun its all realtime and dynamic, but probably not helpful for existing setups so it comes with more tools for example if i want to watch syslog on a server i can do:\r\n\r\n```bash\r\n$ tail -f /var/log/syslog\r\n```\r\n\r\nTo post this to watchy i can do:\r\n\r\n```bash\r\n$ # hostname and port of watchy server, this will attach or create the daemon as expected\r\n$ tail -f /var/log/syslog | /opt/watchy/bin/wtail -k syslog -b localhost -p 7878\r\n```\r\n\r\n![alt text](http://redbrain.github.io/watchy/images/usage/watchy3.png \"Arch1\")\r\n\r\nAnd if i want to watch some pids i can do:\r\n\r\n```bash\r\n$ /opt/watchy/bin/watcher -b localhost -p 7878 key:pid key:pid...\r\n# if you specify -k <keyname> this will then do: watchHost (keyname)\r\n```\r\n\r\n![alt text](http://redbrain.github.io/watchy/images/usage/watchy2.png \"Arch1\")\r\n\r\nThis can even integrate with C/C++ applications:\r\n\r\n```c\r\n#include <watchy/watchy.h>\r\n\r\nstatic int watchy_fd;\r\n\r\n// super enterprise logging library\r\nint mylogginginit (...)\r\n{\r\n    int ret = watchy_cAttachRuntime (WTCY_DEFAULT_FIFO, \"localhost\", 7878, &watchy_fd);\r\n    if (ret != WTCY_NO_ERROR) {\r\n        fprintf (stderr, \"Watchy failed [%s]\\n\", watchy_strerror (ret));\r\n        return -1;\r\n    }\r\n   /// done...\r\n}\r\n\r\nvoid mylogwrapper (int level, const char * fmt, ...)\r\n{\r\n    char buffer [BUF_SIZE];\r\n    ...\r\n    vsnprintf (buffer, sizeof (buffer)...);\r\n    // log the message\r\n\r\n    struct watchy_data data;\r\n    memset (&data, 0, sizeof (data));\r\n    // buffer expects to be null terminated\r\n    watchy_logPacket (&data, buffer);\r\n    watchy_writePacket (&data, watchy_fd);\r\n}\r\n```\r\nBut whats interesting is you can then Federate all Watchy Servers onto a common backend such as Ganglia or MongoDB.:\r\n\r\n![alt text](http://redbrain.github.io/watchy/images/arch/watchy2.png \"Federation onto a common backend\")\r\n\r\nThis is great because you can then reuse your existing infrastructure. Watchy comes with a realtime web dashboard and you can view realtime graphs:\r\n\r\n![alt text](http://redbrain.github.io/watchy/images/usage/watchy2.png \"Memory Usage\")\r\n","google":" ","note":"Don't delete this file! It's used internally to help with page regeneration."}